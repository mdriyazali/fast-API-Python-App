name: FastAPI CI/CD Pipeline with Minikube

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t fastapi-app:latest .

      # Step 4: Log in to DockerHub (optional)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Push Docker image to DockerHub (optional)
      - name: Push Docker image
        run: |
          docker tag fastapi-app:latest ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure build job completes first

    steps:
      # Step 1: Checkout code again
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install Minikube and kubectl
      - name: Install Minikube and kubectl
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/v1.25.2/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.22.0/bin/linux/amd64/kubectl
          sudo install kubectl /usr/local/bin/kubectl

      # Step 3: Start Minikube
      - name: Start Minikube
        run: |
          minikube start --driver=docker
          kubectl config use-context minikube

      # Step 4: Create dynamic deployment.yaml using environment variables
      - name: Create Kubernetes Deployment file
        run: |
          cat <<EOF > deployment.yaml
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: fastapi-app
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: fastapi-app
            template:
              metadata:
                labels:
                  app: fastapi-app
              spec:
                containers:
                - name: fastapi-app
                  image: ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
                  ports:
                    - containerPort: 8000
          EOF

      # Step 5: Create dynamic service.yaml file
      - name: Create Kubernetes Service file
        run: |
          cat <<EOF > service.yaml
          apiVersion: v1
          kind: Service
          metadata:
            name: fastapi-service
          spec:
            selector:
              app: fastapi-app
            ports:
              - protocol: TCP
                port: 80
                targetPort: 8000
            type: LoadBalancer
          EOF

      # Step 6: Apply the deployment and service to Kubernetes
      - name: Deploy to Minikube
        run: |
          kubectl apply -f deployment.yaml --validate=false
          kubectl apply -f service.yaml --validate=false

  # Optional: Rollback job in case of deployment failure
  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()  # Trigger only if deploy fails

    steps:
      # Step 1: Rollback Kubernetes deployment
      - name: Rollback Kubernetes deployment
        run: |
          kubectl rollout undo deployment/fastapi-app
